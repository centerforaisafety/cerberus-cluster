- hosts: all
  gather_facts: true
  tasks:
    - debug:
        msg: "Gathering facts"

- hosts: controller, slurm_backup
  become: true
  tasks:
    - name: Stop Slurm DB Daemon
      shell: systemctl stop slurmdbd
    - name: Stop Slurm Controller Daemon
      shell: systemctl stop slurmctld

- hosts: compute, login
  become: true
  tasks:
    - name: Stop Slurm Daemon
      shell: systemctl stop slurmd

- hosts: all
  become: true
  vars:
    slurm_version: "23.02.1-1"
    slurm_all_packages:
      - "slurm-{{slurm_version}}.el{{ansible_distribution_major_version}}.x86_64.rpm"
      - "slurm-devel-{{slurm_version}}.el{{ansible_distribution_major_version}}.x86_64.rpm"
      - "slurm-contribs-{{slurm_version}}.el{{ansible_distribution_major_version}}.x86_64.rpm"
      - "slurm-perlapi-{{slurm_version}}.el{{ansible_distribution_major_version}}.x86_64.rpm"
      - "slurm-torque-{{slurm_version}}.el{{ansible_distribution_major_version}}.x86_64.rpm"
      - "slurm-openlava-{{slurm_version}}.el{{ansible_distribution_major_version}}.x86_64.rpm"
      - "slurm-slurmctld-{{slurm_version}}.el{{ansible_distribution_major_version}}.x86_64.rpm"
      - "slurm-slurmdbd-{{slurm_version}}.el{{ansible_distribution_major_version}}.x86_64.rpm"
      - "slurm-pam_slurm-{{slurm_version}}.el{{ansible_distribution_major_version}}.x86_64.rpm"
      - "slurm-libpmi-{{slurm_version}}.el{{ansible_distribution_major_version}}.x86_64.rpm"
      - "slurm-slurmd-{{slurm_version}}.el{{ansible_distribution_major_version}}.x86_64.rpm"
  tasks:
    - name: Download slurm .rpms
      get_url:
        url: "https://objectstorage.eu-frankfurt-1.oraclecloud.com/p/VnkLhYXOSNVilVa9d24Riz1fz4Ul-KTXeK4HCKoyqv0ghW3gry3Xz8CZqloqphLw/n/hpc/b/source/o/slurm/{{ item }}"
        dest: "/data/slurm_rpms"
      with_items: "{{slurm_all_packages}}"
      delegate_to: 127.0.0.1
      run_once: true  
    - name: manually install all of the .rpms together (fails separately)
      shell: yum install -y /data/slurm_rpms/{{slurm_all_packages[0]}} \
        /data/slurm_rpms/{{slurm_all_packages[1]}} \
        /data/slurm_rpms/{{slurm_all_packages[2]}} \
        /data/slurm_rpms/{{slurm_all_packages[3]}} \
        /data/slurm_rpms/{{slurm_all_packages[4]}} \
        /data/slurm_rpms/{{slurm_all_packages[5]}} \
        /data/slurm_rpms/{{slurm_all_packages[6]}} \
        /data/slurm_rpms/{{slurm_all_packages[7]}} \
        /data/slurm_rpms/{{slurm_all_packages[8]}} \
        /data/slurm_rpms/{{slurm_all_packages[9]}} \
        /data/slurm_rpms/{{slurm_all_packages[10]}}
      # Needed in case you wish to rerun this playbook otherwise it'll error.
      ignore_errors: true

- hosts: controller, slurm_backup
  become: true
  tasks:
    - name: Safely restart the Database
      shell: timeout 1m slurmdbd -D -vvv
      ignore_errors: true
    - name: Restart Slurm DB Daemon
      shell: systemctl start slurmdbd
    - name: Restart Slurm Controller Daemon
      shell: systemctl restart slurmctld

- hosts: compute, login
  become: true
  tasks:
    - name: Restart Slurm Daemons
      shell: systemctl restart slurmd

- hosts: all
  tasks:
  - name: Recursively remove pyxis directory
    file:
      path: /tmp/pyxis
      state: absent

- hosts: compute
  become: true
  vars:
    enroot_top_path: "{{ nvme_path }}/enroot/"
  tasks:
    - include_role: 
        name: docker
      when: enroot|default(true)|bool
    - include_role: 
        name: nvidia-container
      when: enroot|default(true)|bool
    - include_role: 
        name: nvidia-enroot
      when: enroot|default(true)|bool
    - include_role:
        name: tuned

- hosts: controller,slurm_backup,compute,login
  gather_facts: true
  vars:
    destroy: false
    initial: true
    download_path: "{{ nfs_target_path if create_fss | bool else ( cluster_nfs_path if cluster_nfs|bool else '/tmp')  }}"
    enroot_top_path: "{{ nvme_path }}/enroot/"
  vars_files:
    - "/opt/oci-hpc/conf/queues.conf"
  tasks:
    - include_role:
        name: slurm
      when: slurm|default(true)|bool

- hosts: all
  become: true
  tasks:
    - name: Reload all Daemons
      shell: systemctl daemon-reload
